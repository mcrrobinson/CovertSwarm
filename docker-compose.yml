version: "3.8"
services:
  # frontend:
  #   build: ./frontend
  #   container_name: 'frontend'
  #   ports:
  #     - '80:80'
  #   depends_on:
  #     - backend
  
  # backend:
  #   build: ./backend
  #   container_name: 'backend'
  #   ports:
  #     - '8000:8000'
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - RABBITMQ_HOST=rabbitmq
  #     - RABBITMQ_PORT=5672
  #   depends_on:
  #     - rabbitmq
  #     - redis
  #   volumes:
  #     - ./backend/files:/app/files
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: 'rabbitmq'
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: 'guest'
      RABBITMQ_DEFAULT_PASS: 'guest'

  redis:
    image: redis:alpine
    container_name: 'redis'
    ports:
      - '6379:6379'

# Considerations.
# The backend service calls docker so it is excluded in this example. There
# are ways to make it work however there are security implications that occur
# and this method would not be used in a real world setting. If you were to do
# this within the cloud you would call a cloud lambda function or something.
# This means that the nginx must be run on host in development in order to
# access the local machine. In a real world setting the API would be exposed
# with authentication so this sort of networking wouldn't be necessary. This is
# for development. To avoid using network as host, I am using the 
# host.docker.internal address to access the host machine. This is only 
# available on Mac and Windows.

# https://docs.docker.com/desktop/networking/#use-cases-and-workarounds